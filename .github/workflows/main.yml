name: Deploy AWS Stack

env:
  TEMPLATE_FILE: "ENV/forum-stack.yaml"
  AWS_STACK_NAME : "forum-stack"
  AWS_RGION_NAME : "us-east-1"
  DOCKER_FILE_NAME : "Dockerfile"

on:
  push:
    branches:
      - master
    paths:
      - "ENV/**"

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0
          
      - name: Enable NuGet authentication
        run: |
          dotnet new nugetconfig
          dotnet nuget add source "https://api.nuget.org/v3/index.json" --name "NuGet"
          
      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

  deploy:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # - name: Set up AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: ${{env.AWS_RGION_NAME}} # Replace with your desired AWS region
    
    # - name: Install AWS CLI
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y awscli

    # - name: Deploy CloudFormation stack
    #   run: |
    #     STACK_NAME=${{env.AWS_STACK_NAME}} # Replace with your desired stack name
    #     TEMPLATE_FILE=${{env.TEMPLATE_FILE}} # Replace with the path to your CloudFormation template

    #     aws cloudformation deploy \
    #       --stack-name $STACK_NAME \
    #       --template-file $TEMPLATE_FILE \
    #       --capabilities CAPABILITY_NAMED_IAM # Modify the `--capabilities` flag as needed
    
    # - name: Fetch AWS stack output and set as env variable
    #   run: |
    #     aws cloudformation describe-stacks --stack-name ${{env.AWS_STACK_NAME}} --region ${{env.AWS_RGION_NAME}} > stack_info.json
    #     export ECR_REPOSITORY=$(jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="RepositoryURL") | .OutputValue' stack_info.json)
    #     echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> $GITHUB_ENV

    # - name: Use env variable
    #   run: |
    #     echo "Output value from AWS stack: $ECR_REPOSITORY"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v1
    #   with:
    #     region: ${{env.AWS_RGION_NAME}}
    
    - name: Build Docker image
      run: docker build . --file ${{env.DOCKER_FILE_NAME}} --tag forum-app:latest