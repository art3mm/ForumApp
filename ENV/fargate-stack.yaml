---
AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy .NET Application on AWS Fargate

Parameters:
  ApplicationName:
    Description: Application name
    Type: String
    Default: ForumApp
  ImageUrl:
    Description: URL of the .NET application Docker image
    Type: String
  DesiredCount:
    Description: Desired number of tasks
    Type: Number
    Default: 2
  MinHealthyPercent:
    Description: Minimum healthy percent value for the ECS service
    Type: Number
    Default: 100
  MaxPercent:
    Description: Maximum percent value for ECS service
    Type: Number
    Default: 200

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enables access to the Application Load Balancer from the internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows instances within the VPC to access the ECS instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref ApplicationName
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
      SecurityGroups:
        - !Ref ALBSecurityGroup

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ApplicationName}-tg
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 15
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip

  FargateCluster:
    Type: AWS::ECS::Cluster

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ApplicationName
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 0.5GB
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
      ContainerDefinitions:
        - Name: !Ref ApplicationName
          Cpu: 256
          Memory: 512
          Image: !Ref ImageUrl
          PortMappings:
            - ContainerPort: 80

  FargateService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref FargateCluster
      ServiceName: !Ref ApplicationName
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      DesiredCount: !Ref DesiredCount
      DeploymentConfiguration:
        MinimumHealthyPercent: !Ref MinHealthyPercent
        MaximumPercent: !Ref MaxPercent
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
      LoadBalancers:
        - ContainerName: !Ref ApplicationName
          ContainerPort: 80
          TargetGroupArn: !Ref ALBTargetGroup